//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/MyInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerMovements"",
            ""id"": ""bf9d7018-7d1e-492c-968c-64b950eba117"",
            ""actions"": [
                {
                    ""name"": ""Mouse Movement Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ca31b14e-477e-40c4-bc59-2a9e01a378ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Movement Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a17bfcf4-ba97-4ba9-b197-a308b9ef4838"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Mouse Button"",
                    ""type"": ""PassThrough"",
                    ""id"": ""115f0fc5-48fd-4d8b-b636-ac80e15988e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c68040f4-5430-47d7-9ef7-002bcc16d48b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Movement Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2adf2f4-30c1-47cd-af6e-e410ce0aa4c2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Movement Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8165167a-1298-4382-bfea-ca837e49a431"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Mouse Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovements
        m_PlayerMovements = asset.FindActionMap("PlayerMovements", throwIfNotFound: true);
        m_PlayerMovements_MouseMovementPosition = m_PlayerMovements.FindAction("Mouse Movement Position", throwIfNotFound: true);
        m_PlayerMovements_MouseMovementDelta = m_PlayerMovements.FindAction("Mouse Movement Delta", throwIfNotFound: true);
        m_PlayerMovements_LeftMouseButton = m_PlayerMovements.FindAction("Left Mouse Button", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovements
    private readonly InputActionMap m_PlayerMovements;
    private IPlayerMovementsActions m_PlayerMovementsActionsCallbackInterface;
    private readonly InputAction m_PlayerMovements_MouseMovementPosition;
    private readonly InputAction m_PlayerMovements_MouseMovementDelta;
    private readonly InputAction m_PlayerMovements_LeftMouseButton;
    public struct PlayerMovementsActions
    {
        private @MyInputs m_Wrapper;
        public PlayerMovementsActions(@MyInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMovementPosition => m_Wrapper.m_PlayerMovements_MouseMovementPosition;
        public InputAction @MouseMovementDelta => m_Wrapper.m_PlayerMovements_MouseMovementDelta;
        public InputAction @LeftMouseButton => m_Wrapper.m_PlayerMovements_LeftMouseButton;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovements; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementsActions instance)
        {
            if (m_Wrapper.m_PlayerMovementsActionsCallbackInterface != null)
            {
                @MouseMovementPosition.started -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnMouseMovementPosition;
                @MouseMovementPosition.performed -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnMouseMovementPosition;
                @MouseMovementPosition.canceled -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnMouseMovementPosition;
                @MouseMovementDelta.started -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnMouseMovementDelta;
                @MouseMovementDelta.performed -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnMouseMovementDelta;
                @MouseMovementDelta.canceled -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnMouseMovementDelta;
                @LeftMouseButton.started -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnLeftMouseButton;
                @LeftMouseButton.performed -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnLeftMouseButton;
                @LeftMouseButton.canceled -= m_Wrapper.m_PlayerMovementsActionsCallbackInterface.OnLeftMouseButton;
            }
            m_Wrapper.m_PlayerMovementsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseMovementPosition.started += instance.OnMouseMovementPosition;
                @MouseMovementPosition.performed += instance.OnMouseMovementPosition;
                @MouseMovementPosition.canceled += instance.OnMouseMovementPosition;
                @MouseMovementDelta.started += instance.OnMouseMovementDelta;
                @MouseMovementDelta.performed += instance.OnMouseMovementDelta;
                @MouseMovementDelta.canceled += instance.OnMouseMovementDelta;
                @LeftMouseButton.started += instance.OnLeftMouseButton;
                @LeftMouseButton.performed += instance.OnLeftMouseButton;
                @LeftMouseButton.canceled += instance.OnLeftMouseButton;
            }
        }
    }
    public PlayerMovementsActions @PlayerMovements => new PlayerMovementsActions(this);
    public interface IPlayerMovementsActions
    {
        void OnMouseMovementPosition(InputAction.CallbackContext context);
        void OnMouseMovementDelta(InputAction.CallbackContext context);
        void OnLeftMouseButton(InputAction.CallbackContext context);
    }
}
